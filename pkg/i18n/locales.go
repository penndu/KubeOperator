// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcb\x6e\xe3\x38\x16\xdd\xf3\x2b\x18\x65\x3b\x28\xcc\xda\x3b\x46\xa2\x1d\x4d\xc9\x92\xa1\x47\x66\x32\x1b\x81\x96\xae\x65\x76\x64\x52\x20\xa9\x4a\xa7\x76\xfd\x5f\xfd\x4f\xfd\x0b\x0d\x52\xb4\xac\xc4\x09\x92\x42\xaf\x02\x23\x3a\xf7\x71\xee\xb9\xe7\xf2\xb6\x91\xa7\x93\x14\x28\x25\x5b\x5a\xd3\xff\xc5\x45\x59\xac\x70\x90\xb2\x13\x60\xd6\x2b\x60\xed\x0b\x86\xdf\xb9\x36\x3a\x40\xf1\xae\x4e\xb3\xf2\xf2\xd1\xae\x07\xa6\x01\x1f\x78\xdf\x63\x2e\xb0\x39\x02\xee\x65\xc3\x7a\x1c\xef\xb0\x9c\x7e\xeb\x17\x6d\xe0\x84\x35\x18\xc3\x45\x87\x07\xd6\x41\x80\xd0\x6d\xd3\x8f\xda\x80\x42\x61\x52\x15\x25\xcd\xeb\x88\x26\xb4\xa4\xf5\x9a\xc4\x09\x8d\x56\x38\x68\x98\xc0\x42\x1a\xdc\x42\x0f\x06\xb0\xff\xdc\x26\x69\x46\xa5\x40\x18\xac\x0d\x33\x10\xcc\x01\xe2\xc2\x95\x96\x57\x69\x1a\xa7\x9b\x15\x0e\xca\xe3\x02\xa6\x5d\x30\x35\x0a\xc1\x45\x77\x05\x4a\xb2\x90\x24\x2b\x1c\xc4\xa7\x41\x2a\x33\xa3\x1a\x26\x2c\x6a\x0f\x78\x1c\x3a\xc5\x5a\x68\x5d\xe5\x0a\x5a\x10\x86\xb3\x1e\xbd\x2a\xba\xce\x69\x91\x55\x79\x48\x57\x38\x58\x33\xde\x43\x8b\x8d\xf4\xf5\xdf\xe0\xf2\x08\x0a\x6c\x1d\x4c\x60\xa6\xb5\x6c\x38\x33\xd0\xe2\xa3\xd4\x06\x8f\xa2\x05\x85\xcd\x91\x6b\xfc\x04\x2f\xc1\x07\x61\xeb\xff\x67\xe9\x2f\xc5\xfe\x29\x05\xbc\x13\x7b\x4d\xaa\xa4\xac\xc3\x9c\x46\x34\x2d\x63\x92\xd4\x21\x49\x1d\x0b\x53\xda\x15\x0e\x22\x38\xb0\xb1\x37\xf8\xd2\xe9\x82\x8a\x29\xa9\x63\xc2\x16\x8f\xee\xb3\xa2\xac\x49\x92\x53\x12\x3d\x5e\x84\x71\x6f\xfb\x7a\xab\x1e\xdf\x97\x43\xcc\x83\x7e\xb7\x9d\x89\x17\xdb\x91\x0f\xb1\x68\xeb\x99\x9b\xa3\x53\x96\x1f\xd3\x7b\x71\xeb\xbb\xc7\x7a\x97\x67\xff\xa1\x61\xf9\x8f\x52\x0c\x4a\xfe\x06\x8d\x09\x50\xf1\x58\x94\x74\x5b\x7b\xfd\xaf\xb3\x2a\x8d\x3e\x91\xff\x81\x2b\x6d\xfe\xfa\xf3\x8f\x00\xa5\x99\xc5\x91\x07\x12\x27\xe4\x2e\xb1\x04\xa7\x12\xc7\x03\x66\x3f\x18\xef\xd9\xbe\x87\x00\xc5\xc5\xa4\x41\xd7\xc3\x42\xfd\x7c\x12\xe4\x14\xd4\x16\x6c\x69\x1f\x35\x28\xb4\x23\x45\xf1\xdf\x2c\x8f\x5c\x3d\x5b\x52\x86\xf7\x5e\xf2\x03\xd3\xfa\x59\xaa\xd6\xb6\xc6\x45\x23\x95\x72\x0d\x64\x79\xbc\x89\x53\x92\x5c\x7d\x2f\x15\xef\xb8\x60\xfd\x47\xc0\xaa\xb8\xec\x09\x09\xcb\xf8\x81\x7a\xa0\x2d\xe3\xbc\x58\x20\x6c\x1f\xed\x0d\xf6\x8c\x34\x52\x18\xd6\x18\xc7\x08\x6b\x4f\x5c\x70\x6d\x14\x33\x52\xdd\xf8\x80\x4b\x16\x53\x89\xf5\xd8\x1c\x5d\x40\x47\x18\x89\xb6\x71\x7a\x2d\x4b\x9b\xb4\xf5\xd2\x74\x41\xa7\x12\xae\xa4\x79\xf3\xba\xe8\x9c\x26\xa4\xa4\xd1\x42\x0f\x95\x85\x1d\x99\x2d\x7d\x39\x75\x3f\x6c\x57\x42\x12\x91\xdd\x5c\x41\xb5\x8b\xc8\x5c\x41\xdf\xb2\xe1\x6d\x62\x68\xf9\x94\xf7\x81\xe6\xf1\xfa\xb1\x0e\xb3\x68\x61\x65\x0f\xa0\xf8\x81\x37\xcc\x70\x29\x70\x23\x5b\xc0\xa0\x94\x54\x76\x94\x0a\x3a\x2e\xc5\x59\xc0\x39\xdd\xc4\x59\xfa\x55\x3b\xc1\x13\xf8\x33\x09\x5b\x17\xb0\xa9\xec\xdf\x73\x22\xeb\x24\x5f\x4e\xe3\x6c\xe4\xb3\x3d\xe9\x99\x78\xed\xaa\x55\x62\x0d\x35\x9c\x28\xea\xc0\x2c\x37\xf6\x22\x93\x23\x34\x4f\xd3\x7f\xa4\x38\xf0\x6e\x54\x8e\x24\x37\x81\x78\x4b\x36\xf4\xe3\x50\xfc\xc4\x3a\xf8\x52\x20\x84\x6e\xe5\x00\x42\x1b\xd6\x3c\xa1\x0d\x2d\xcf\x34\xd3\x3c\xcf\xf2\x49\x7e\x9e\xc9\x83\x1c\x85\x33\x36\xaf\x84\x2d\x9c\xf6\xa0\x66\x31\x91\x28\x5a\x8a\x67\x0f\x20\x30\x6b\xfd\x55\xf0\x90\xd9\x5f\xbd\xda\x3e\x36\x57\x0f\x78\xcf\x59\xcf\xd8\x7b\x52\xd4\x9e\x53\x6b\x36\x1e\xb0\xe0\x7f\xe6\x33\x7c\x67\x07\xd0\xad\x90\x2d\xa0\xd4\x6a\xf1\xec\xcf\xfe\x3a\xd6\x25\x29\xbe\xaf\x70\x40\xda\x16\xdb\x8f\xb0\x54\xe7\x43\xeb\x7e\x9e\x47\xed\xef\xe5\xbf\x86\x89\xe5\x67\xc6\x0d\xe6\x06\xb7\x52\xc0\x37\x9b\x60\xcf\x9a\xa7\x71\x20\x4d\x23\x47\x61\xd0\x8e\xe4\x64\x5b\xd3\xed\xae\x7c\xb4\xb7\x54\xe8\xf1\x70\xe0\x0d\xb7\xb7\x7a\x60\x8a\x9d\xc0\x80\xd2\xd6\x0e\xcb\xba\xa8\x76\xbb\x2c\x77\xbb\x28\xf4\x38\x58\x93\xb3\xc2\x7b\x19\xec\x41\xbf\xa7\xe1\xf7\x0f\xb6\xe7\xe0\x14\x3a\x3b\xfe\x1d\x09\xbf\x57\xbb\x9a\x84\x61\x56\xa5\xbf\xe2\xfd\xaf\x0a\xff\xf2\x11\x40\xb7\x56\xe7\x6f\xce\xf3\x17\xb2\x59\xd4\x2f\x24\xf1\x53\xbd\x73\x35\x22\xdf\xe3\x3a\x4e\xe8\xe4\x67\x7e\x1f\xbc\xf2\xfd\xd8\xcc\xdc\x94\xbd\x46\x80\xf7\x70\x90\x0a\xb0\x7e\xe6\xa6\x39\xda\x77\xd7\xe2\x03\x36\xb5\xfd\x6a\x5f\xa7\x2c\xd7\xaf\xa6\x3d\x58\xb0\x05\x42\x8b\xc7\xc1\x2d\xd4\x02\x96\xd3\xa2\xcc\x72\x7a\x8d\x53\xa0\x8d\x54\x5c\x74\xd3\x0a\x9e\xd7\x23\x07\x2d\x47\xd5\xc0\x35\x87\x8b\x36\x3f\x6d\xee\x72\x5a\xdf\xbf\xfc\x97\x9d\x99\xef\xfc\x99\xfa\x3d\xf4\x52\x74\xda\x4e\xe8\x95\x21\x95\xf6\x81\x24\x07\x50\xde\xa5\xe7\x7d\x1a\x40\x1d\xa4\x3a\xf9\x8d\xb2\xe6\x3f\xdd\x86\xf9\xc2\x4c\xd3\x28\x5e\x44\x73\x54\x52\xf0\x9f\x96\x27\x0d\x4a\x63\xa6\x00\xff\xdb\x5f\x92\x24\xdb\xc4\xe9\x5b\x4c\xb5\x3c\xa0\xf6\x89\x74\xe3\xbf\x8e\xe2\xc2\x3f\x14\xca\xcb\x03\x7a\x50\xf2\xc8\xf7\xdc\x68\x6c\xbf\xf1\x39\x0e\x4a\x9e\x70\x2f\xbb\xce\x4e\x89\x8b\x6f\x5f\xb9\xbf\xe8\xb6\xe1\x1a\x85\x71\xe1\x5c\xe0\xad\x35\xd8\xc7\x07\xd7\xd8\x30\xfd\xf4\xd6\x06\x2c\xf4\xc7\x29\x74\x06\x8b\x1e\xb6\x75\x98\xa5\xeb\x78\x73\x79\xf3\x85\x4b\xeb\xbd\x7a\xfc\x21\x84\xfe\x0e\x00\x00\xff\xff\xbf\xbf\x6b\xe1\x69\x0c\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 3177, mode: os.FileMode(420), modTime: time.Unix(1603696104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x41\x53\xdb\x46\x14\xbe\xef\xaf\xf0\xd8\xd7\x4e\xa7\xe7\xdc\x16\x69\x31\x6a\x64\x49\x23\xc9\xb4\xf4\xa2\x21\x46\x4d\x69\xc0\x66\x0c\xf4\xd0\x53\x1c\x02\x18\x62\xc5\x34\x31\x29\x24\x6e\xc0\xc4\x04\x4f\x12\xdb\x24\x24\x98\x58\x98\xfc\x19\xed\x4a\x3e\xe5\x2f\x74\x56\x2b\x0b\x19\xe2\x96\xab\xfd\xbe\xf7\xbe\x7d\xef\x7b\xdf\x53\x22\x93\x9b\x9f\xcf\x65\x81\x04\x53\xc8\x40\x3f\x0b\x9a\xae\xdd\x8a\xc5\xf1\x96\xe5\x1e\x1d\xe3\xce\x07\xdc\xdc\xc1\xd5\x46\x1c\x08\x8a\x21\xc9\xfa\x65\x80\xd7\xee\xe0\x6a\xc3\x3d\xb1\x5d\x7b\xcf\x6b\x5d\xb8\xbd\x56\xbf\xf6\xa9\xff\xcf\x01\xae\xbd\xc5\x6b\xbb\xec\x77\x41\x89\x03\x90\xc8\xcc\x2d\x2f\x2e\x99\x79\xc0\x89\x69\x4d\x47\xaa\xc1\x23\x11\xe9\xc8\x18\x87\x82\x88\xf8\x5b\xb1\x38\xf9\x7b\x9f\x9c\x6c\xe3\xe2\x7e\x7f\xb7\x8e\x7b\x4f\xf1\x86\xe5\x6e\x9e\x92\xfb\x05\xf7\xf9\xc3\xfe\x8b\x35\xf7\xa2\x1e\x0f\xa1\x82\xe6\x93\x50\xd3\x92\x24\x48\xc9\x5b\xb1\x38\x0b\x70\xce\x2c\x5c\x6d\x78\x5f\xb6\xbc\x5a\xc9\x39\x6b\x7e\x3d\x2f\x5c\x83\x88\x32\x07\x45\xfa\xae\xf6\x39\x5e\x3d\x64\xb0\xa0\xb0\xb5\xee\x76\x8f\x7c\xa2\x79\x73\xc6\xcc\x2e\xcd\x4e\xcf\x81\x21\x8e\x86\x8a\x34\x39\xad\x72\x88\xe2\x19\xcd\xfa\x7b\xef\xe3\xe1\xd7\xf3\x82\xd7\x3e\x74\x8f\x76\xfa\x4f\x0e\x9d\xb3\x47\xa4\xba\x81\x57\x4f\xbc\x42\xc5\x39\xb3\x49\xb5\x1b\x1f\x91\xc4\xf8\x45\x96\x6e\x9a\x09\x97\xdb\x6e\xa5\x81\x4b\x7e\xb2\x71\x98\x16\x75\x83\x53\x11\x8f\x24\x5d\x80\xa2\xc1\x41\xc9\x7f\x1b\xab\x43\xbb\x61\xef\x78\xad\x3a\x5e\x6f\x12\xab\xe5\x9c\x59\xde\x4a\x8f\x15\xf1\x1b\x02\x12\xbf\xe5\x16\x97\xc0\x84\xac\xe9\x06\x14\x55\x04\xf9\xa9\xcb\x69\x32\xca\x91\x71\x07\xdc\xfd\xe8\x70\x52\xd7\x29\x87\x38\xd7\x2e\x33\xca\x83\x91\x5d\x4f\x60\x8c\x4d\x19\x8a\x2a\xff\x88\x38\xfd\xa6\xb9\x6a\x9f\xdd\x17\x2d\x9f\xbd\x36\xa5\xe9\x28\x65\x04\x2a\x1c\x97\xd3\x12\x1f\x88\x70\xb5\xc8\x24\x47\xaa\xef\x48\xb5\x2b\x28\x7e\xb8\x24\xd3\x50\x38\x09\x05\x11\x8e\x89\xb4\x37\x82\x12\xf3\x3e\x3d\x24\xdd\x2d\xda\x98\xd3\x93\x38\x10\x34\x26\x0a\x9f\xe2\xa5\x0c\x7d\x7d\xb0\x5c\x71\x00\x40\x62\x79\xd1\xcc\x03\x05\x6a\xda\x4f\xb2\xca\xfb\xc5\x53\x50\xe7\x26\x7c\x29\xad\xb9\xfb\x85\x7e\x65\xd7\x6b\xb7\xe3\x40\x56\x85\xa4\x20\x41\x71\x38\xe4\xf1\xde\x70\x54\x5a\xbb\x94\x24\xe4\x74\x61\x92\x52\x73\x2b\x0d\x52\xec\x90\xea\x1b\xbc\x45\xc7\xed\x77\xa3\xe3\x15\x2a\x74\x89\x5a\x35\x77\x6b\x0d\xff\xb5\xe3\xbf\xca\x47\x47\xdf\x4f\x39\x37\xeb\x0c\xef\x47\x40\x3e\x25\x48\xa3\x84\x11\x9b\x9e\x99\x9f\xcd\xc6\x58\x38\xd3\x87\x77\xf0\x36\x22\x91\x28\x3b\x15\x89\x50\x47\x7c\x64\x62\x01\xcd\x0f\xb5\x50\x9e\x6c\x3e\x71\x20\xf2\x50\x09\x8b\xa6\x15\x1e\xfa\x45\xe9\xaf\x43\xc5\x9c\x2f\x2d\x52\xf9\xec\x57\x9a\x44\xaa\x30\x3e\x65\x70\x32\x1f\x31\x82\xfe\x9b\x92\xd7\x2e\x44\xba\x05\x12\x79\xf3\xee\x6c\x2e\x3b\x10\x93\x8a\x92\x82\x2c\xdd\x68\x2b\x71\xa9\x8b\xf7\xf6\xa2\x62\x8a\xec\x12\x48\xfc\x99\xcb\x9a\x83\xac\x74\x1f\x6f\x96\x73\x90\x61\x48\xa3\x2b\x0d\xb7\xf7\xc1\x6b\xd5\x70\xf1\xc9\xb0\xeb\xa4\x45\x6a\x38\xde\xe3\x0e\x2e\x3f\xa3\x0e\x55\x3c\x66\xbb\xc1\xe6\x4b\x5e\xdd\x27\x7b\x87\xfd\x55\xcb\xed\x31\x85\x0b\x29\x98\x44\xa3\x80\xdb\x55\xbc\x52\x1e\x01\x04\x89\xdc\x82\x99\x5d\x5c\x9a\xce\xdc\x03\x49\xa4\x0f\xba\x84\x54\x55\x56\xa9\x46\x36\x2e\x58\x12\xd6\x12\x1a\xbf\x90\xcf\xfd\x6e\x66\x96\x52\xe6\xfc\x1d\x33\x1f\x4e\x1d\xf2\x7c\x38\x65\xf6\x42\xd2\xb1\xf1\xe6\x7e\x04\x11\xba\x50\xa0\x8a\x51\x4a\x63\xc2\xb8\x66\x41\x03\xd4\x04\xd4\x8c\xa0\x53\x14\xe2\x07\x47\xdd\xe3\xeb\x79\xe1\x1b\xf6\x95\xcd\xcd\x98\x40\xa2\x8a\x19\xd8\x57\x70\x07\x0c\x1d\x6a\xb7\xe9\xc4\x56\x4f\x1d\xfb\x99\xb7\xf9\xc0\x7d\xf0\x99\x6c\x1f\xf7\xd7\xcb\xe4\xa9\xe5\xf4\xaa\xa4\xf9\x0a\x57\x1b\x64\xe3\xc8\xab\x95\xbe\x8b\x79\xed\x8e\xdb\xdc\xc0\x17\xab\xb8\xb5\xe2\xd8\xef\xd8\xcf\xb8\x55\x22\xed\xed\xef\x69\x99\x3b\xd3\x99\x7b\xcb\x0b\x30\x93\xc9\x2d\x67\x97\x80\x02\x55\x98\x32\x50\x4a\xd1\xa7\x68\x85\xf2\x03\xb2\x7d\x3c\x70\x10\xfa\x70\x2d\xad\x28\xb2\xaa\xfb\x16\x6a\x91\x4a\x9b\x94\xe8\xdd\x72\xdf\xdb\xf8\xe5\xa3\x38\xe0\x26\x10\x77\x3b\x72\xe9\xf6\x6b\xfd\x37\xa5\x50\x52\xa1\x49\x8e\x41\xee\x76\x5a\x31\x20\xc7\xc9\x69\xe9\xa6\x76\x89\xeb\xeb\x8e\xdd\xf3\x3e\xbe\xc6\xe5\xce\x08\xd3\x04\x89\x85\xb9\xe9\xec\x95\x3b\xf4\x3f\x69\xa3\x7a\xbe\x9e\x36\x72\xcf\xc7\xfc\x3e\x81\x80\xfb\xb8\x20\x22\x66\x1c\x03\xf9\x32\x6b\x0e\xf2\x53\xaa\xe4\xd9\xba\x63\x9f\xe2\x35\x0b\x17\xd7\x89\x75\x10\xe5\x3f\xb4\x38\x2c\x63\x78\xdc\xd9\xf4\x58\xf4\x37\x8e\xbb\x8a\x34\x5d\x56\xd1\x95\x70\x52\x38\xc0\x75\x6b\x10\x1e\xea\x57\x35\x17\x73\xcb\xf9\x8c\x79\xbd\x25\x91\x67\xfc\x07\xf9\xe8\xd0\xae\x5c\xb6\x4b\x3d\x0f\xdd\xb1\xf7\x2f\x9d\xee\xe3\x2b\xaa\xf6\xbe\xbc\xf0\x6a\x25\xd2\xac\x33\x79\x06\x14\xe7\x66\xa6\x17\x98\x93\x86\x36\xcc\x3a\x89\xb7\x4a\xa4\x79\x88\x8b\xc7\x54\x58\x81\x9d\x76\x7f\x08\x5c\x57\x94\x93\x82\x74\x15\x11\x9a\x2e\xbb\xe6\x7e\x01\x3f\x9a\x17\xb4\xe0\x1c\xb2\x0f\x34\xf7\x75\x81\x34\x0f\xe8\x5f\x0c\xe2\xee\xda\xfd\xdd\xb5\xd8\x88\xf3\x03\x12\x99\xd9\x45\xc0\x09\x9a\xbf\x70\x57\xb7\x90\x32\x1d\x7c\x3f\x90\x8d\xb7\xa4\x5c\x76\xce\x9a\xee\xf3\x87\x8e\x6d\xe3\xcd\x1a\x45\xff\x31\xcf\xe5\xb2\xbf\xce\xde\x05\x93\x29\x83\x93\xa5\x71\x21\x79\xf9\x01\xc2\xfc\x2c\xf2\x01\x02\x00\xf8\x37\x00\x00\xff\xff\x4b\xcf\xc1\x79\x9a\x0a\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2714, mode: os.FileMode(420), modTime: time.Unix(1603696109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x72\xab\x36\x14\xde\xf3\x14\x0a\xde\x76\xee\x74\xed\x9d\x02\x8a\x43\x2f\x06\x86\x9f\xdb\xa6\x1b\x46\x86\x03\x56\x83\x25\x46\x12\x4d\x73\x77\x7d\xaf\xbe\x53\x5f\xa1\x23\x90\x31\xfe\xc9\x5c\x67\xba\xca\x64\xac\xef\xfc\x7c\xe7\x3b\xdf\x61\x55\x89\xc3\x41\x70\x27\xc2\x5b\x52\x92\xdf\x82\x2c\xcf\xd6\xc8\x8d\xe8\x01\x10\xed\x24\xd0\xfa\x1d\xc1\x5f\x4c\x69\xe5\x3a\xce\xaa\xea\x06\xa5\x41\x3a\x5e\x58\x64\x39\x49\x4b\x9f\x84\x24\x27\xe5\x13\x0e\x42\xe2\xaf\x91\x5b\x51\x8e\xb8\xd0\xa8\x86\x0e\x34\x20\xfb\x1c\x31\x8e\xaa\x41\x4a\xe0\x1a\x29\x4d\x35\xb8\x73\x80\x20\x2b\xa3\x38\x2f\xd3\x22\x8a\x82\x68\xb3\x46\x6e\xbe\x5f\xc0\xd4\x18\x4c\x0e\x9c\x33\xde\x5e\x81\xc2\xd8\xc3\xe1\x1a\xb9\xc1\xa1\x17\x52\xcf\xa8\x8a\x72\x83\xda\x01\x1a\xfa\x56\xd2\x1a\xea\xb1\x72\x09\x35\x70\xcd\x68\xe7\x9c\x15\x5d\xa6\x24\x8b\x8b\xd4\x23\x6b\xe4\x3e\x51\xd6\x41\x8d\xb4\xb0\xf5\x3f\xa0\x7c\x0f\x12\x4c\x1d\x94\x23\xaa\x94\xa8\x18\xd5\x50\xa3\xbd\x50\x1a\x0d\xbc\x06\x89\xf4\x9e\x29\xf4\x0a\xef\xee\x07\x61\xcb\xdf\xe3\xe8\x53\xb1\xbf\x0b\x0e\x37\x62\x3f\xe1\x22\xcc\x4b\x2f\x25\x3e\x89\xf2\x00\x87\xa5\x87\xa3\x91\x85\x29\xed\x1a\xb9\x3e\x34\x74\xe8\x34\x3a\x75\xba\xa0\x62\x4a\x3a\x32\x61\x8a\x77\x9e\xe3\x2c\x2f\x71\x98\x12\xec\xbf\x9c\xa6\xfe\x6c\xfa\xba\x9c\xba\xed\x6b\x44\xcc\x83\xbe\xd9\xce\xc4\x8b\xe9\xc8\x86\x58\xb4\xf5\xc6\xf4\x1e\xe9\xd3\x70\x6f\xc5\x2d\x1f\x5f\xca\x24\x8d\x7f\x21\x5e\xfe\xbf\x52\xf4\x52\xfc\x01\x95\x76\x9d\xec\x25\xcb\xc9\xb6\x0c\x92\x91\xa9\xa7\xb8\x88\x4c\xed\x49\x07\x54\x01\x6a\x58\xd7\x19\x65\x1a\x44\x27\x2a\xda\xa1\x20\x41\x0d\x93\x4a\xff\xfb\xcf\xdf\xae\x13\xc5\x06\x87\xbf\xe1\x20\xc4\x8f\xa1\x21\x38\x12\x28\xe8\x11\xfd\x93\xb2\x8e\xee\x3a\x30\x5c\x0e\x0a\xa4\x93\xe0\x2c\xfb\x35\x4e\xfd\x31\xc9\x16\xe7\xde\xb3\xd5\x71\x4f\x95\x7a\x13\xb2\x36\xf5\x32\x5e\x09\x29\xc7\xaa\xe2\x34\xd8\x04\x11\x0e\xaf\xde\x0b\xc9\x5a\xc6\x69\xf7\x11\xb0\xc8\x4e\xe2\xc7\x5e\x1e\x7c\x23\x16\x68\xca\x38\x6e\x0b\x70\x53\x5c\xfd\x80\x6c\x9b\x95\xe0\x9a\x56\x7a\x6c\x93\xd6\x07\xc6\x99\xd2\x92\x6a\x21\x1f\x6c\xc0\x25\x35\x91\x40\x6a\xa8\xf6\x63\xc0\x91\x05\xec\x6f\x83\xe8\x5a\x6b\x26\x69\x6d\xf5\x36\x06\x9d\x4a\xb8\xd2\xdb\xc3\x79\xd1\x29\x09\x71\x4e\xfc\xc5\x90\x0b\x03\xdb\x53\x53\xfa\x72\x94\x76\x82\x63\x09\xa1\x8f\x93\xb9\x82\x22\xf1\xf1\x5c\x41\x57\xd3\xfe\x32\x31\xd4\x6c\xca\xeb\xac\x24\xb4\x4c\xf0\xa3\xce\x52\xb2\x09\xe2\xe8\xde\xad\x47\x13\xf8\x47\x4a\x33\xcb\x6a\x52\x99\xbf\xc7\x44\x66\xe1\xef\x4e\x33\x6e\xfb\x8f\xe4\xdc\x51\x7e\x6e\x7e\x45\x68\x7c\xcf\x9b\x9a\x6e\x41\x2f\x17\xeb\x34\xf8\x3d\x54\xaf\xd3\x2f\x82\x37\xac\x1d\x24\xd5\x4c\xf0\x91\xd3\x60\x8b\x37\xe4\xe3\x50\xec\x40\x5b\xb8\x2b\x90\xe3\xac\x44\x0f\x5c\x69\x5a\xbd\x3a\x1b\x92\x1f\x69\x26\x69\x1a\xa7\x93\xa0\x2c\x93\x8d\x18\xf8\xe8\x3f\x76\xb6\x5b\x38\xec\x40\xce\xf2\xc0\xbe\xbf\x94\xc3\x0e\x80\x23\x5a\x5b\xf3\xb6\x90\xd9\x06\xad\x7e\x3e\xf6\x40\x0b\xb8\x65\x80\x47\xec\x33\xce\x4a\xcb\xa9\xf1\x04\x0b\x58\xf0\x3f\xf3\xe9\xdd\x50\xb5\xb3\xe2\xa2\x06\x27\x8a\x7d\x32\xdb\xa8\x3d\x62\x65\x8e\xb3\xaf\x6b\xe4\xe2\xba\x46\xe6\x11\x12\xf2\x78\x0f\xc7\x7f\x8f\xa3\xb6\x67\xed\xa7\x7e\x62\xf9\x8d\x32\x8d\x98\x46\xb5\xe0\xf0\xc5\x24\xd8\xd1\xea\x75\xe8\x71\x55\x89\x81\x6b\x27\xc1\x29\xde\x96\x64\x9b\xe4\x2f\xe6\xe4\x71\x35\x34\x0d\xab\x98\x39\xa9\x3d\x95\xf4\x00\x1a\xa4\x32\xae\x95\x97\x59\x91\x24\x71\x3a\x6e\x17\x57\x43\x6f\x8e\xa3\x11\xde\x7b\x6f\xee\xee\x33\xf1\xbe\x9e\x6c\xfc\x1b\x48\xd6\xb0\x6a\x9c\x27\x6a\x46\x85\xce\xc6\xfc\x88\xbd\xaf\x45\x52\x62\xcf\x8b\x8b\xe8\x33\x16\x7d\x56\xf8\xdd\x5e\xed\xac\x8c\xce\x2f\xae\xe8\x1d\xd9\x0c\xea\x13\x49\xec\x54\x1f\xc7\x1a\x1d\xdb\xe3\x53\x10\x92\xc9\xa1\xec\x3e\x58\xe5\xdb\xb1\xe9\xb9\x29\x73\x34\x00\xed\xa0\x11\x12\x90\x7a\x63\xba\xda\x33\xde\x2e\x1f\xd0\xa9\xed\xb3\x7d\x9d\xb2\x5c\x7f\xdc\xec\xc0\x80\x0d\x10\x6a\x34\xf4\xe3\x42\x2d\x60\x29\xc9\xf2\x38\x25\xd7\x38\x09\x4a\x0b\xc9\x78\x3b\xad\xe0\x71\x3d\x52\x50\x62\x90\x15\x5c\x73\xb8\x68\xf3\x87\xcd\x9d\x2e\xe0\xed\x03\x7d\xda\x99\xf9\x1c\x1f\xa9\xdf\x41\x27\x78\xab\xcc\x84\xce\x0c\x29\x37\xdf\x31\xa2\x87\xc9\x37\x16\x4b\xd9\x83\x6c\x84\x3c\xd8\x8d\x32\x76\x3e\xb9\xfd\x7c\x33\xa6\x69\x64\xef\xbc\xda\x4b\xc1\xd9\x77\xc3\x93\x02\xa9\x10\x95\x80\x7e\xb6\xb7\x21\x8c\x37\x41\x74\x89\x29\x96\x27\xd1\x7c\xc9\x3c\xd8\xd7\x7e\x90\xd9\x7b\x6e\xea\x57\xef\x4a\xc3\xc1\x08\x64\xcf\x76\x4c\x2b\x64\xde\xd8\x1c\x8d\x14\x07\xd4\x89\xb6\x35\x53\x62\xfc\xcb\x3d\x17\xd5\x59\x55\x4c\x39\x5e\x90\x8d\x2e\x70\x69\x0d\xe6\x0b\x99\x29\xa4\xa9\x7a\xbd\xb4\x01\x63\xa5\xce\x7f\x01\x00\x00\xff\xff\xec\x16\x7f\x77\x8c\x0b\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 2956, mode: os.FileMode(420), modTime: time.Unix(1598953309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4f\x73\xda\xd6\x17\xdd\xeb\x53\x30\xb0\xfd\xcd\x6f\xba\xce\xee\x59\x7a\xb6\xd5\x08\x49\x23\x89\xb4\xee\x46\xe3\x60\x4d\xeb\xc6\x06\x0f\xb6\x37\x5d\x85\x38\xe6\x8f\x83\x02\x4d\x70\x6a\x27\x4c\x6c\x1c\x88\x99\x24\x80\x13\xa7\x86\x20\x93\x7c\x19\xbd\x27\xb1\xca\x57\xe8\x3c\x3d\xa1\x08\x08\xad\x59\x8a\xfb\xe7\xbc\x7b\xce\x3d\x37\x96\x4c\x6f\x6e\xa6\x53\x8c\x08\xe2\x50\x87\x3f\xf3\xaa\xa6\xde\x8a\x44\x51\xc5\x74\xce\x2f\x50\xef\x03\x6a\x1f\xa1\x5a\x2b\xca\x30\xb1\xe4\xc6\xee\xf6\x8e\x91\x61\x58\x21\xa1\x6a\x50\xd1\x39\x28\x40\x0d\xea\x8b\x80\x17\x20\x77\x2b\x12\xc5\x7f\x9d\xe2\xcb\x43\x54\x38\x1d\x1d\x37\xd0\xf0\x29\x2a\x9a\xce\xc1\x15\xbe\x9f\x75\x9e\x3f\x1c\xbd\xc8\x39\x9f\x1b\xd1\x20\x95\x57\x75\x51\xd2\x74\x25\x21\x8a\xbc\xb8\x74\x2b\x12\xa5\x01\x76\xdf\x44\xb5\x96\xfb\xa5\xe2\xd6\x4b\x76\xbf\xfd\xf5\x3a\x3b\x93\x22\x48\x2c\x10\x08\xbe\xee\x35\xda\x6f\xd2\x34\xbf\xb1\x99\x77\x06\xe7\x1e\xd0\x8c\xb1\x66\xa4\x76\xd6\x57\x37\x98\x09\x8c\xba\x02\x55\x29\xa1\xb0\x90\xe4\x53\x98\x8d\xf7\xee\xc7\xe6\xd7\xeb\xac\xdb\x6d\x3a\xe7\x47\xa3\x27\x4d\xbb\xff\x08\xd7\x8a\x68\xff\xd2\xcd\x56\xed\xbe\x85\x6b\x83\xe8\x9c\x22\xfa\x2f\x92\x78\xd3\x4a\xa8\xdc\x75\xaa\x2d\x54\xf2\x8a\x2d\x82\x84\xa0\xe9\xac\x02\x39\x28\x6a\x3c\x10\x74\x16\x88\xde\xdb\x68\x1f\x32\x0d\xeb\xc8\xed\x34\x50\xbe\x8d\xcd\x8e\xdd\x37\xdd\xbd\x21\x6d\xe2\x0d\x84\x89\xfd\x96\xde\xde\x61\x96\x25\x55\xd3\x81\xa0\x40\xc0\xad\x7c\xa3\x8d\x42\x0e\xd1\xe6\x63\xf7\xa2\x03\xa6\x66\x21\x07\x79\x8e\x55\xa6\x90\xc7\x94\xcd\x16\xd0\x17\x56\x74\x59\x91\x7e\x84\xac\x76\xd3\x5a\xf5\x4f\xce\x8b\x8e\x87\x5e\x5d\x51\x35\x18\xd7\x79\xd9\x7b\xf1\xa2\x94\x10\x09\x20\xb7\xdb\x43\xfb\x05\x54\x7f\x8b\x72\xc7\xb8\xf6\x0e\xd7\x06\xbc\xec\x85\x8b\x12\x09\x05\x77\x00\x2f\x80\x05\x81\xcc\x86\x97\x23\xee\xdf\x0f\xf1\xa0\x42\x06\x73\x75\x49\xe6\xb1\xbb\x6d\x64\x18\x19\xa8\xea\x4f\x92\xc2\x79\x75\xe3\x40\x63\x97\x3d\x95\xe4\x9c\xd3\xec\xa8\x7a\xec\x76\xbb\x51\x46\x52\xf8\x25\x5e\x04\xc2\x64\xc8\xe3\x93\xc9\xa8\x84\xfa\x4d\x6d\x80\xd5\xf8\x3b\xa4\xab\x53\x6d\xe1\x42\x0f\xd7\xde\xa0\x0a\x61\xd2\x7b\x68\xcf\xcd\x56\x9d\x4b\xcb\xe9\xd4\x9d\x4a\x0e\xfd\x79\xe4\x01\xf6\xb2\xc3\x4f\x23\xe2\x6c\x37\x68\xbe\x17\x01\xb8\x38\x2f\xce\xe3\x3c\xb2\xba\xb6\xb9\x9e\x8a\xd0\x70\x4a\xbd\x7b\xf6\x36\xc4\x7e\x18\x9d\x02\x05\xa0\x41\x2e\x44\x86\x0f\xf3\x43\x3d\x50\x1e\x1d\x7d\x94\x11\x38\x20\x07\x4d\x13\x32\x07\xbc\xa6\xe4\xeb\x44\x33\xfb\x4b\x07\x57\x3f\xf9\x3a\xcb\x18\xbf\xae\xa7\x53\x63\x05\x28\x70\x89\x97\xc4\x1b\xad\x12\x2a\x0d\xd0\xc9\x49\x58\x01\xa1\x05\x60\x62\x7f\xa4\x53\xc6\xb8\x2a\x59\xa2\x9b\xd5\x1c\x57\x98\x10\xd6\x5e\xcb\x19\x7e\x70\x3b\x75\x54\x78\x32\x69\x15\x09\x81\xb8\x84\xfb\xb8\x87\xca\xcf\x88\xad\x14\x2e\xa8\xa0\x29\x73\xf8\xd5\x7d\x7c\xd2\x1c\xed\x9b\xce\x90\xca\x92\x8f\x83\x25\x38\x2f\xf1\xb0\x86\xf6\xca\x73\x12\x99\x58\x7a\xcb\x48\x6d\xef\xac\x26\xef\x31\x4b\x50\x1b\x4f\x09\x2a\x8a\xa4\x10\xf6\x8b\x9f\x69\x11\x3a\x12\x12\xbf\x95\x49\xff\x6e\x24\x77\xe2\xc6\xe6\x5d\x23\x13\xf0\x09\x38\x2e\xe0\x8f\xbe\x10\xf7\x2c\x74\x70\x1a\xca\x08\xac\xc3\xe7\x7b\x9e\x86\x28\xe5\x33\xbe\x31\xce\x5a\x06\xaa\xee\x4f\x8a\xa4\x78\xc1\xe1\x95\xff\x7a\x9d\xfd\x8e\xe7\xa4\xd2\x6b\x06\x23\x4a\x1c\x0c\x3c\xc7\x37\x6f\x5d\x03\xea\x6d\xc2\xd8\xfe\x95\x6d\x3d\x73\x0f\x1e\x38\x0f\x3e\xe1\xc3\x8b\x51\xbe\x8c\x9f\x9a\xf6\xb0\x86\xdb\xaf\x50\xad\x85\x8b\xe7\x6e\xbd\xf4\xbf\x88\xdb\xed\x39\xed\x22\xfa\xbc\x8f\x3a\x7b\xb6\xf5\x8e\x7e\x46\x9d\x12\xee\x1e\xfe\x9f\xb4\xb9\xbb\x9a\xbc\xb7\xbb\x05\x92\xc9\xf4\x6e\x6a\x87\x91\x81\x02\xe2\x3a\x8c\xcb\xda\x0a\xe9\x50\x7e\x80\x0f\x2f\xc6\x6b\x4f\x1e\xae\x26\x64\x59\x52\x34\xcf\xf7\x4c\x5c\xed\xe2\x12\x39\x36\xce\x7b\x0b\xbd\x7c\x14\x65\xd8\x65\xc8\xde\x0e\x9d\xa7\xd3\xfa\xe8\x4d\x29\x90\x54\xe0\x6c\x0b\x80\xbd\x9d\x90\x75\xc0\xb2\x52\x42\xbc\xa9\xc7\xa1\x46\xde\xb6\x86\xee\xc7\xd7\xa8\xdc\x9b\xe3\x74\x4c\x6c\x6b\x63\x35\x35\x75\x3c\xfe\xa3\x6c\x58\xcf\xb3\x65\x43\x47\x78\xc1\x9b\x13\xe3\x63\x5f\xe4\x05\x48\x2d\x61\x2c\x5f\xea\xa7\x7e\x7d\x02\x15\x3f\xcb\xdb\xd6\x15\xca\x99\xa8\x90\xc7\xe6\x59\x18\xff\xc4\xe2\xd0\x8a\xc1\x45\xa6\xec\xd1\xe8\xef\x5c\x64\x05\xaa\x9a\xa4\xc0\xa9\x70\x9c\x3d\x43\x0d\x73\x1c\x1e\xe8\x57\x31\xb6\xd3\xbb\x99\xa4\x31\x3b\x92\xd0\x33\xfe\x05\x7c\x98\xb4\xa9\x73\xf4\x4d\xcf\x13\xc7\xe7\xfd\x4b\x7b\xf0\x78\x4a\xd5\xee\x97\x17\x6e\xbd\x84\xdb\x0d\x2a\x4f\x1f\xe2\xc6\xda\xea\x16\xf5\xc8\xc0\x60\xe9\x24\x51\xa5\x84\xdb\x4d\x54\xb8\x20\xc2\xf2\x8d\x72\xf0\x83\xef\xa7\x82\xb4\xc4\x8b\xd3\x19\x81\x9d\xd2\x13\xec\x35\xf0\xa2\x39\x5e\xf5\x6f\x18\xb9\x1a\xd6\x89\xf3\x3a\x8b\xdb\x67\xe4\x2f\x9a\xe2\x1c\x5b\xa3\xe3\x5c\x64\xce\x61\x61\x62\xc9\xf5\x6d\x86\xe5\x55\x6f\xe1\xa6\xb7\x90\x20\x1d\x1f\x7d\x5c\x7c\x8b\xcb\x65\xbb\xdf\x76\x9e\x3f\xb4\x2d\x0b\x1d\xd4\xa3\x0c\xf9\xfd\x13\x00\x00\xff\xff\xc8\x13\xad\x9d\xe9\x09\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2537, mode: os.FileMode(420), modTime: time.Unix(1598953315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

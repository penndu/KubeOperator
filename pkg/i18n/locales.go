// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xc1\x72\xa3\xcc\x11\xbe\xf3\x14\x6d\x5c\x7b\xdb\xfc\x95\xb3\x6e\x2c\xc2\x36\x59\x04\x14\x20\xff\x71\x2e\xd4\x08\x5a\xd2\xc4\x68\x86\x9a\x19\xd6\xf1\x7f\xcb\x7b\xe5\x9d\xf2\x0a\xa9\x1e\x46\x08\xc9\x72\x56\x5b\xbf\x2f\x16\x55\xd3\xdd\xdf\x74\xf7\xf7\x75\xcf\x7d\x23\x0f\x07\x29\xbc\x34\x58\x45\x75\xf4\xf7\xb8\xac\xca\x05\xf8\x29\x3b\x20\xb0\x4e\x21\x6b\xdf\x01\xff\xc5\xb5\xd1\xbe\x17\xe7\x75\x9a\x55\xa7\x43\x79\x87\x4c\x23\x6c\x79\xd7\x01\x17\x60\xf6\x08\x9d\x6c\x58\x07\x71\x0e\x72\xfc\xd6\xef\xda\xe0\x01\x34\x1a\xc3\xc5\x0e\x7a\xb6\x43\xdf\xf3\xee\x9b\x6e\xd0\x06\x95\x17\x26\xeb\xb2\x8a\x8a\x7a\x19\x25\x51\x15\xd5\x0f\x41\x9c\x44\xcb\x05\xf8\x0d\x13\x20\xa4\x81\x16\x3b\x34\x08\xee\x38\x05\x69\x06\xa5\x50\x18\xd0\x86\x19\xf4\x27\x07\x71\x69\xa1\x15\xeb\x34\x8d\xd3\xc7\x05\xf8\xd5\x7e\x66\xa6\xad\x33\x35\x08\xc1\xc5\xee\x83\x51\x92\x85\x41\xb2\x00\x3f\x3e\xf4\x52\x99\xc9\xaa\x61\x82\xac\x36\x08\x43\xbf\x53\xac\xc5\xd6\x22\x57\xd8\xa2\x30\x9c\x75\xde\x19\xe8\xba\x88\xca\x6c\x5d\x84\xd1\x02\xfc\x07\xc6\x3b\x6c\xc1\x48\x87\xff\x0e\xaa\x3d\x2a\x24\x1c\x4c\x00\xd3\x5a\x36\x9c\x19\x6c\x61\x2f\xb5\x81\x41\xb4\xa8\xc0\xec\xb9\x86\x57\x7c\xf7\x3f\x71\x5b\xff\x23\x4b\x7f\xc9\xf7\x1f\x52\xe0\x15\xdf\x0f\xc1\x3a\xa9\xea\xb0\x88\x96\x51\x5a\xc5\x41\x52\x87\x41\x6a\xb3\x30\x86\x5d\x80\xbf\xc4\x2d\x1b\x3a\x03\xa7\x9b\xce\x52\x31\x06\x6d\xfd\xb1\x5d\xc2\xa7\x28\xfc\x7e\xaa\x9a\xcd\xf9\xc9\x4a\x50\x0f\x9d\x4c\x6d\x3b\xd8\xb6\xd2\xf6\xf7\xa0\x51\xd9\x33\xbe\xe7\x79\xf7\x94\x0a\xef\x29\x2b\xab\x3a\x48\x8a\x28\x58\xbe\x9c\xda\xec\x89\xb2\x74\xd9\x8b\x2e\x4b\xd6\x62\x02\x70\x35\x39\x63\x96\x29\x3f\xce\xc5\x2c\x49\x6f\xdc\xec\x2d\x18\x57\xf4\x6b\x7e\xeb\x6f\x2f\x75\x5e\x64\x7f\x8b\xc2\xea\x4f\x85\xe8\x95\xfc\x27\x36\xc6\xf7\xca\x97\xb2\x8a\x56\xb5\x63\xd3\x43\xb6\x4e\x97\x3f\x21\xd3\x96\x2b\x6d\xfe\xfb\x9f\x7f\xfb\x5e\x9a\x91\x5d\xf0\x1c\xc4\x49\xf0\x2d\xa1\x72\xa5\x12\xe2\x1e\xd8\x0f\xc6\x3b\xb6\xe9\xd0\xf7\xe2\x72\xec\x68\x7b\x87\x19\x97\xf8\xd8\xde\xa3\x53\x02\xec\x8f\xf9\x8e\x57\x79\x56\x54\x75\x54\x14\x59\x51\xa7\xeb\x24\x19\x9d\xb6\xcc\x30\xba\xa6\x33\x7b\x63\x1a\xb6\x72\x10\xed\x1d\x38\xa4\xcd\x1e\x9b\x57\x8b\xd3\x1d\xd9\xf2\x0e\xef\xce\x9d\x92\xbb\xfa\x39\x48\xd6\x84\x34\x3a\xf4\xe6\x7d\xf4\x2b\x05\x74\x5c\x20\x7c\xd1\xe7\xe7\x7f\x2f\xb2\xf4\xb1\x7e\xc8\x8a\x55\x40\xd0\x63\xd1\x48\xa5\xb0\x31\x30\x06\x90\xea\xc0\xcc\xa7\xc6\xb3\xa6\x9e\x27\x36\x9c\x75\xa4\x34\xe3\x25\x3e\xf5\xe1\x4a\x9e\xae\x57\x0b\xf0\x03\x30\xd2\xb0\x0e\xe4\x16\xbe\x68\x50\xf2\x4d\xd3\x4f\x7b\x01\xa6\x10\xd8\x46\x10\xa0\xee\x2b\xe8\x57\xde\x5f\xf5\x53\x06\xcf\xe7\xa4\xd5\xec\x87\xeb\x96\x2f\xfa\x2b\x28\x64\x5a\x8a\x05\x81\xf0\xbc\x7b\x22\x84\x97\x07\x65\xf9\x7b\x56\x2c\xed\x15\x56\x41\x15\x3e\x39\x62\xf5\x4c\xeb\x37\xa9\x5a\x6a\x33\x7e\xcc\x8b\xef\x65\x45\xfc\x18\xa7\xee\xca\xf3\xf3\x52\xf1\x1d\x17\xac\xfb\xcc\x70\x5d\x9e\x14\x30\x08\xab\xd8\x02\xad\x8e\xbc\x74\x92\x89\x82\x7a\x6a\x56\x73\x29\x0c\x6b\x8c\xad\x3a\x6b\x0f\x5c\x70\x6d\x14\x33\x52\xdd\x39\x87\xf3\xc4\xa7\x12\xf4\xd0\xec\xad\x43\xdb\xbc\xc1\x72\x15\xa7\x1f\x05\x87\x82\xb6\x4e\x74\xac\xd3\x11\xc2\x07\xd1\xb9\x3b\x07\x5d\x44\x49\x50\x45\xcb\x19\x37\xd7\x64\xb6\x67\x04\x7d\xce\x40\x47\x3c\x0b\x21\x59\x06\xf9\x84\x60\x9d\x2f\x83\x09\x41\xd7\xb2\xfe\x32\x30\xb6\x7c\x8c\xfb\x1c\x15\xf1\xc3\x4b\x1d\x66\xcb\xd9\x90\x7a\x46\xc5\xb7\xbc\x61\x86\x4b\x01\x8d\x6c\x11\x50\x29\xa9\x7c\x2f\x5a\x05\x71\x52\x2f\xe3\xd2\x51\x74\xc5\x78\x77\x1c\x81\xda\xb6\x4e\xcb\xf5\x8d\x89\x3d\x7a\x9b\x97\x37\x3a\x90\xc3\x03\x33\xcd\x1e\xb6\xb6\xb5\x46\x6d\x20\x49\x9e\xfa\xa7\xa4\xaf\x09\x2b\xa5\xe6\xff\xe8\xf1\xb1\x47\x2e\x9d\x58\x51\x58\x80\xff\xa6\xa4\xd8\x9d\x14\x1b\xa4\x9a\x99\x78\xf7\x0a\x77\x5c\x8a\xa3\x76\x16\xd1\x63\x9c\xa5\xb7\xce\x45\x18\x8d\x7f\xa6\x9e\x34\xce\x28\x14\xfd\x3f\x06\xa2\x91\x78\x73\x18\x3b\x0f\x7f\x26\xd1\x1d\x13\xe7\xeb\xc1\x28\x87\xe1\x98\xb4\x1d\x9a\xf9\xb0\xb8\xa2\x84\x8d\x14\x5b\xbe\x1b\x94\xed\x09\x5b\x94\x78\x15\x3c\x46\x9f\xbb\xe2\x07\xb6\xc3\xdb\x1c\xe5\x75\xf9\x94\x15\xa3\x2c\xea\x61\xbb\xe5\x0d\xa7\x45\x28\xee\x29\x2d\xb2\x47\xa1\x0d\x6b\x5e\xbd\xc7\xa8\x3a\x56\xe0\x58\xbd\x54\x1e\x93\x6c\xc5\x8f\xce\x3b\x4e\xac\xf0\xb0\x41\x35\xd1\x2a\x58\x2e\xe7\x34\xda\x20\x0a\x60\xad\xdb\x7c\x9c\xc9\xb4\x43\x38\xde\x7d\xbe\x40\x38\x83\x6b\xdb\xc3\xd1\xf6\x29\x28\x6b\x97\x6e\x1a\x81\xce\x60\x56\x9a\x29\xd5\xe1\x15\x35\xf0\xee\x85\x6c\xd1\x4b\x89\x95\xc7\xad\xc1\x6d\x80\x75\x15\x94\xdf\x49\xc2\xdb\x16\xe8\x10\x75\xac\x5b\x26\xed\xe7\xb1\x0b\xdc\x4e\xf8\xb5\x1f\x0b\xf0\xc6\xb8\x01\x6e\xa0\x95\x02\x7f\xa3\x00\x1b\xd6\xbc\x0e\x7d\xd0\x34\x72\x10\xc6\xcb\x83\x22\x58\xd5\xd1\x2a\xaf\x5e\x2e\xcb\xd0\x33\xc5\x0e\x68\x50\x69\x1a\xd2\x55\x5d\xae\xf3\x7c\xac\xd6\x5a\xe8\xa1\xa7\xf9\x45\x3d\xf9\xde\xd3\xd2\x7a\xbe\x36\x9d\xe9\xc8\xc8\xe7\x69\x0f\xf9\x16\x84\xdf\xd7\x79\x1d\x84\x61\xb6\x4e\x7f\x65\x23\x39\x03\x7e\xf3\x6a\xe2\xdd\x13\x05\x2e\x56\xd0\x1b\xa2\x91\xd5\x2f\x04\x71\x55\xfd\x66\x31\x7a\xee\x8e\x0f\x71\x12\x8d\xca\xee\xa8\xe2\x48\xe1\xca\x66\xa6\x4b\xd9\x45\x03\x36\xb8\x95\x0a\x41\xbf\x71\xd3\xec\xe9\x6d\x31\x3b\xc0\xc6\x6b\x9f\x51\x79\x8c\xf2\xf1\x65\xb0\x41\x32\x26\x43\x6c\x61\xe8\x2d\xd7\x66\x66\x45\x54\x56\x59\x11\x7d\xb4\x53\xa8\x8d\x54\x5c\xec\xac\xc5\x44\x8f\x02\xb5\x1c\x54\x83\x1f\x73\x38\xbb\xe6\x4f\x2f\x77\x5a\xf8\xae\xef\xa3\x27\xce\x4c\xdb\xe7\x31\xf5\x1b\xec\x24\x8d\x19\x23\xcf\xb5\xaa\xa2\x47\x80\xec\x51\xb9\x79\x35\xf1\xa9\x47\x45\x8b\x95\x63\x14\x8d\xc1\x71\x4a\x4e\xb3\x76\xac\x46\xf9\x2e\x9a\xbd\x92\x82\xff\x41\x79\xd2\xa8\xc6\x49\xf6\x57\x37\x53\x93\xec\x31\x4e\x2f\x6d\xd6\xf3\x55\x82\x16\xf7\x3b\x77\xfa\x34\x1b\xab\xd3\x23\xb1\x57\x72\xcf\x37\xdc\x68\xa0\x33\x2e\xc6\x56\xc9\x03\x74\x72\xb7\xa3\x2a\x71\xf1\xdb\x2d\x9b\x88\x77\xdf\x70\xed\x85\x71\x69\x55\xe0\x52\x1a\x68\x25\xe6\x1a\x0c\xd3\xaf\x97\x32\x40\xa6\x3f\x0e\xa1\xd5\x5e\xef\x79\x55\x87\x59\xfa\x10\x3f\x9e\x5e\x22\xe1\x5c\x95\x3f\x3c\x49\x4e\x06\x97\xcf\xd9\xea\x52\xd1\x3f\xab\x56\x8b\x7d\x27\xdf\x0f\x56\x50\x3a\x26\x6e\xae\x1a\xef\x69\x3e\x4c\x38\x29\x1e\x0a\x83\x0a\x5b\x7a\x3e\x68\xdc\x59\x97\x04\xa1\xe3\x8d\xd1\x27\x52\x5a\xec\x94\xda\xd3\xb1\xaf\xd0\x9f\x3f\x45\xd8\x8e\x71\x31\xbd\xfe\xe7\x6f\x8f\x38\xa7\xc5\x98\x10\x36\xcd\xd0\x73\x6c\x81\x89\x76\x06\x52\xa1\xf5\xd4\x8e\x10\xff\xd2\x4b\xd9\x91\x9b\x3c\xcb\x92\xab\x39\x8a\x73\xa0\x33\xb3\xe1\x73\x45\x47\xa6\xa7\xce\x38\xd2\xcf\x23\x4e\x13\x86\xfe\xfe\x17\x00\x00\xff\xff\xac\xe0\xe2\x70\xdb\x10\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 4315, mode: os.FileMode(420), modTime: time.Unix(1608703465, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x4f\x57\xe2\x58\x16\xdf\xbf\x4f\xc1\x81\xd3\xbb\x99\x39\xb3\xae\x5d\x2a\x44\xcd\x54\x48\x72\x92\x60\x8f\xb3\xc9\xb1\x29\xa6\xc7\x69\x05\x8e\x7f\x66\x31\xab\xa6\x4a\x05\xec\x44\x9c\x6a\x75\x4a\xa5\x5b\xb0\xb4\xca\xd1\xe6\x8f\xda\x25\x08\xa8\x5f\x26\xef\x25\x59\xf9\x15\xe6\xbc\xf7\x92\x10\xa0\xe8\x76\x49\xb8\xbf\xfb\xff\xfe\xee\x7d\xb1\x54\x76\x69\x29\x9b\x01\x22\x93\xe0\x74\xee\xaf\xbc\xaa\xa9\x2f\x22\x51\xb8\x63\xda\x9f\x5a\xb0\x7d\x0d\xeb\xef\x61\xe5\x3c\x0a\x78\x59\x17\x25\x6d\x20\xe0\x34\xdb\xb0\x72\x6e\xdf\xf4\xec\xde\xb1\xd3\x78\xb0\xef\x1b\x6e\xed\xb3\xfb\xd3\x09\xac\x5d\xc2\xcd\x03\xfa\x9d\x97\xa3\x00\xc4\x52\x8b\x6b\x2b\xab\xe9\x65\xc0\x0a\x49\x55\xe3\x14\x3d\xce\x09\x9c\xc6\xe9\x53\x0c\x2f\x70\xf1\x17\x91\x28\xfa\x6f\x15\xdd\xec\xc1\x62\xd5\x3d\x38\x85\xf7\x3f\xc2\x92\x69\x6f\xdd\xa2\xef\xf3\xf6\xe1\xba\x7b\xb4\x69\x3f\x9c\x46\x03\x28\xaf\x12\x27\x94\xa4\x28\xf2\xe2\xf4\x8b\x48\x94\x0a\x58\x1d\x13\x56\xce\x9d\xc7\x1d\xa7\x66\x58\x9d\xfa\x53\x3f\x3f\x06\x11\x24\x96\x11\x70\x5c\xcd\x3e\xdc\x38\xa3\x30\xcf\xb0\x59\xb0\xbb\x9f\x88\xa3\xcb\xe9\xd7\xe9\xcc\xea\xc2\xfc\x22\x18\xf2\x51\x57\x38\x55\x4a\x2a\x2c\x87\xf1\xd4\xcd\xd3\x2b\xe7\xd7\xb3\xa7\x7e\xde\x69\x9e\xd9\x9f\xde\xbb\xef\xce\xac\xce\x0f\xa8\x52\x82\x1b\x37\x4e\x7e\xd7\xea\xf4\x50\xa5\x1b\x9d\xa0\x44\xff\x9b\x24\x3e\x57\x13\x2c\x37\xed\xdd\x73\x68\x10\x65\x53\x4c\x52\xd0\x74\x56\xe1\xe2\x9c\xa8\xf1\x8c\xa0\xb3\x8c\x48\x62\xa3\x76\x70\x36\x7a\xef\x9d\xc6\x29\x2c\xd4\x91\xd9\xb0\x3a\xa6\xf3\xf6\x9e\x1a\x21\x09\x21\xf5\x65\x67\x38\xf6\xd5\x20\xf5\xd4\x22\xad\x35\x05\x58\x9d\x6d\x7b\xf7\x1c\x15\xdb\xf8\xe3\x51\x07\xee\x18\x38\x33\xff\xc8\xae\xac\x82\x19\x49\xd5\x74\x46\x50\x38\x26\x3e\x37\xe8\x03\x1a\x6c\xa8\x51\xbc\xa8\x89\x74\x60\x68\x3c\xd8\x00\x67\xf7\xca\x34\x58\xbf\xd8\xe3\x0a\xf4\x97\x73\xba\xac\x48\x7f\xe1\x58\xed\xb9\xba\x6a\x77\xf6\x51\x83\xc4\xad\xce\xa9\x1a\x97\xd0\xbd\xfe\x9d\x92\x92\x62\xdc\x6b\xdf\x8d\x22\x6d\x56\x54\xf9\x05\x55\xba\xbc\x4c\xd3\x24\x61\x51\x66\x96\xe1\x05\xe6\xa5\x80\xb3\xca\xcb\x11\xe7\xf3\x3a\xea\xee\xe0\x0c\xdd\xde\x44\x01\xaf\xd2\x76\x22\x2e\x0e\x1a\x98\x74\x16\xd5\x15\xa5\xc9\xe2\x13\xb2\xa4\x68\x3a\xa7\x28\x92\xa2\x8b\x49\x01\x37\x20\xaa\x5c\xa0\xd2\x03\x2c\xb6\x60\xb9\x49\x21\xf6\xe1\x3a\xda\x6b\x21\xb3\x41\x82\x69\xa3\x0f\xdf\xa3\xe3\x33\x4f\xdb\x7e\xc1\xea\xdd\x12\xbf\xc2\x0a\xb1\x2a\x7d\x96\x11\x92\xd8\xbd\xaf\x56\x22\x4e\xcd\x40\x95\x92\xfd\xbf\x2e\xd5\x33\x2c\xfc\xb5\x22\x89\xd3\xfa\x94\xa4\x24\x18\x2d\x10\xb7\x2f\x9b\xb0\xfc\x01\x55\xfb\xb0\x5f\xb6\x3a\x26\xaa\x7f\xb0\x6b\x23\xb8\x50\xa3\x85\x13\xe7\x99\x2b\x3d\xe0\xa1\x2b\xb6\x60\x73\xd3\x7d\x77\x36\x8c\xf4\x8a\x26\x26\x13\xb8\x5a\x1b\x57\x11\x0f\x43\x9c\xa3\xd6\x60\xa7\xf3\xd4\x37\x9c\xf6\x8d\xf3\x58\xf8\x22\x58\x65\x66\xb9\xa0\xbb\xb0\x02\xeb\xf1\x27\xdc\x61\x5e\xd5\x0d\xb8\x7d\x0c\x8f\xaa\x4f\xfd\xc3\xaf\x56\xa2\x00\x80\xd8\xda\x4a\x7a\x19\xc8\x8c\xaa\x7e\x2d\x29\x71\xe2\x70\x82\xd1\xd8\x19\x32\xf1\x9b\x76\x35\xef\xee\x1e\x38\xcd\x66\x14\x48\x0a\x3f\xcd\x8b\x5e\x4c\x81\xc8\xf6\xf1\xb0\x54\x52\x1d\x30\x07\xc3\x6a\x3c\xf1\x85\xce\x05\xaa\x5c\xc0\x1d\x3c\x95\xb4\x5a\x4e\x7e\x17\x73\x5d\xa3\x66\xef\x6c\xc2\xff\xbc\x27\xa5\x22\xe8\x70\xce\x70\x83\xd4\x4f\x29\x9e\x48\x30\xf1\x04\x2f\x4e\x9a\xdf\xc8\xfc\xeb\xa5\x85\x4c\x84\x8a\xd3\xa9\x74\x4e\x2e\x43\x93\x1c\xf6\x4e\xe1\x04\x46\xe3\xe2\xa1\xf1\xf0\xdc\xbc\xae\x05\x2c\x42\x87\x21\x0a\x84\x38\x23\x07\x46\x93\x72\x9c\x21\x46\xf1\xd7\x21\x63\xd6\x63\x03\xed\xde\x11\x4b\xb3\x9c\xc2\x4f\xcd\xe9\xac\x14\x0f\xf1\xb5\x7b\x61\x38\xcd\x7c\x28\x5b\x5c\x82\xe1\x05\x3d\xce\xab\xde\xc0\xb8\x6f\x1a\x56\xef\x96\x2e\x05\xe7\xe4\xd2\xfe\x98\x9f\x94\x2e\x1f\x1b\x2e\x06\x45\x43\xe3\xce\xdd\x30\x83\x21\xf7\xe8\x2b\x28\xb0\x8a\x7f\x0d\x68\xcc\x67\xac\x80\xc3\x68\x39\x7d\x02\x1b\xc6\x92\x71\x0c\xa3\x50\x71\x7f\xb8\xfc\x00\xc4\x96\xd3\xdf\x2e\x64\x33\x3e\x17\x29\xdc\x34\x2f\x89\xcf\x5a\x07\xd0\xe8\xc2\xe3\xe3\x30\x17\x85\x48\x1c\xc4\xfe\x9d\xcd\xa4\x7d\xad\x78\x11\x3c\x4f\xa7\xaf\x61\x88\xe2\xde\x9e\xdb\xf7\xd7\x4e\xa3\x06\x8b\xef\x86\xd7\x1d\x25\x1a\x67\xbb\x0d\xcb\xfb\x74\x4a\x29\xb5\x86\xf9\xc5\xdd\x30\xed\x7b\x4a\x90\x7c\x82\x99\xe6\x26\x01\xf7\x2a\xf0\x6d\x79\x12\x50\xd6\xd5\x19\x49\xc1\x4d\xc7\xe7\x22\x3e\x3b\x02\x10\xcb\xe6\xd2\x99\x95\xd5\xf9\xd4\x77\x60\x9a\xd3\xfc\xe4\xf9\x69\x1f\x50\x07\xc9\x14\x4e\x4a\x6e\x39\xfb\xcf\x74\x6a\x35\x91\x5e\xfa\x26\xbd\x1c\xb4\x37\x13\x0f\xd5\x96\x04\x8e\xda\x3d\xb8\x55\x0d\x21\x82\xad\xe8\xb5\xff\xa4\x91\xa2\x13\x30\xb6\x12\x7d\xd4\x0c\xa3\xea\x5e\x02\x31\x84\x08\x87\x77\xd2\x53\x3f\x3f\x86\x05\xb1\x4c\xf6\x75\x1a\x88\x78\x34\xfc\xa5\xe8\xdd\x25\xba\xc6\xa8\xaf\x08\xf5\xdd\x5a\xbd\x7d\x67\xeb\x8d\xfd\xe6\x0e\xed\xb5\xdc\x42\x19\xfd\x68\x5a\xf7\x15\xcc\x7f\x95\x73\x54\xfa\xe4\xd4\x8c\x3f\x44\x9c\x66\xdb\xae\x97\xe0\xc3\x06\x6c\xbc\xb5\x7a\xbf\xd0\xcf\xb0\x61\xa0\xe6\xde\x9f\xb0\x99\x6f\xe6\x53\xdf\xad\xe5\x98\x54\x2a\xbb\x96\x59\x05\x32\xa3\x30\x09\x9d\x4b\xc8\xda\x1c\xb6\x50\x7e\x83\xf6\x5a\x7e\xe6\x71\xe0\x6a\x52\x96\x69\x49\x30\xd1\xee\x36\x91\x81\xef\x28\xfb\xaa\x07\x7f\xfe\x21\x0a\x46\xd6\x3f\xaa\xd6\xdc\x0b\x23\x34\x64\x5e\x63\xbe\x64\xd8\x57\x49\x59\x67\x58\x56\x4a\x8a\xcf\x5d\xc2\xf0\xb4\x60\xf5\xee\x9d\x5f\x3f\xc2\x72\x7b\xc2\x2a\x06\xb1\xdc\xe2\x7c\x66\xe4\x2e\xfa\x1d\xb5\xe1\x36\x1f\x57\x1b\xba\x2f\x5f\x92\x3c\x01\xcf\xf7\x29\x5e\xe0\x28\x43\xfa\x5d\x4d\x17\xbe\xa7\x1f\xbb\x4a\x97\x2b\xdc\x34\x61\xb1\x80\xcc\x93\xb0\xff\x43\xf3\x44\x35\x06\xc7\x26\xad\x1e\x95\xfe\xc2\xb1\xa9\x70\xaa\x26\x29\xdc\x88\x38\xca\x9f\xc0\x53\xd3\x17\x0f\xfa\x57\x49\xaf\x64\xd7\x96\x53\xe9\xf1\x94\x84\xc2\xf8\x0d\xe7\xc3\x45\x1b\xb9\x97\x06\xfd\x3c\x74\x1d\x5d\xfd\x6c\x75\xb7\x47\xba\xda\x79\x3c\xc2\xeb\xb9\x7e\x4a\xdb\xd3\x73\x71\xf1\xf5\x7c\x8e\xae\x8c\x60\xdf\xd0\x4c\xc2\x1d\x03\xd5\xcf\x60\xb1\x85\x1b\xcb\xdb\x1b\xdd\x3f\x7b\xeb\x45\x90\xa6\x79\x71\x14\x11\x6c\x17\x7a\x23\x12\x03\x44\x7a\xb0\x33\xe8\x83\xc1\xfe\x98\x47\xf5\x13\xfc\x17\x85\xd8\x07\x3d\xf7\x60\x33\x32\x61\xcf\x82\x58\x6a\x61\x05\xb0\xbc\x4a\x06\x6e\x74\x0a\xb1\xa7\xfe\x55\x8a\x4a\x97\xa8\x5c\xb6\x3a\x75\xfb\x70\xdd\xea\xf5\xe0\x56\x0d\xa3\xff\xb5\xc4\x66\x33\x7f\x5f\xf8\x16\xcc\x26\x74\x56\x12\xa7\xf8\xe9\xc1\x59\x4b\x69\x2e\x74\xd6\x0e\x64\x46\xdf\x2f\x81\xe8\x20\xbf\xa1\x9e\xfd\x9d\x2c\x2f\xe4\x30\x8d\x0e\x9e\x5d\xf4\xf5\x74\xb8\xce\xcb\xa8\xf1\x19\x2f\xb2\xf6\x35\xaa\x94\xc8\x2f\xb8\x79\x6d\x5f\xe4\xf1\xd9\xd4\x6c\xbb\x05\x13\xed\xb7\xa8\x74\xf0\x36\x1b\x39\x5a\xf1\xd5\x75\x72\x09\xcd\x2a\xd9\xbe\x46\x70\x49\xb8\x85\x2d\xb4\xfb\x40\x8d\xff\x31\x97\xcd\x2e\x62\xbc\x2c\x49\xc2\x58\x64\x7c\x2e\x82\xae\xaa\x5f\xdc\x65\x4f\x7d\x23\xfc\x6e\xc3\xb4\x0f\x00\xf8\x7f\x00\x00\x00\xff\xff\x68\xe0\x07\xf5\x4c\x0e\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 3660, mode: os.FileMode(420), modTime: time.Unix(1608703775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
